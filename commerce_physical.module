<?php

/**
 * @file
 * Provides API support for working with physical product types in Drupal Commerce.
 */


/**
 * Determines the weight field to use for a given entity.
 *
 * @param $entity_type
 *   The type of entity passed to the function.
 * @param $entity
 *   The actual entity whose weight field name should be determined.
 *
 * @return
 *   The name of the field to use on the entity to find a weight value or NULL
 *   if none was found.
 */
function commerce_physical_entity_weight_field_name($entity_type, $entity) {
  $bundle = field_extract_bundle($entity_type, $entity);
  $field_name = NULL;

  // Look for the first weight field available for the entity.
  foreach (field_info_instances($entity_type, $bundle) as $instance_name => $instance) {
    // Load the field info for the current instance.
    $field = field_info_field($instance['field_name']);

    // If it's of the proper type...
    if ($field['type'] == 'physical_weight') {
      // Save its name and exit the loop.
      $field_name = $instance_name;
      break;
    }
  }

  // Allow other modules to specify a different field name.
  drupal_alter('commerce_physical_entity_weight_field_name', $field_name, $entity_type, $entity);

  return $field_name;
}

/**
 * Determines the weight to use for a product line item on an order.
 *
 * @param $line_item
 *   A product line item whose weight should be determined.
 *
 * @return
 *   A weight field value array representing the weight of the product line item
 *   or NULL if none was found.
 */
function commerce_physical_product_line_item_weight($line_item) {
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $weight = NULL;

  // If the line item references a valid product...
  if (!empty($line_item_wrapper->commerce_product)) {
    $product = $line_item_wrapper->commerce_product->value();

    if (!empty($product)) {
      // If the product has a valid weight field...
      $field_name = commerce_physical_entity_weight_field_name('commerce_product', $product);

      if (!empty($field_name) && !empty($product->{$field_name})) {
        // Extract the weight value from the product.
        $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
        $weight = $product_wrapper->{$field_name}->value();

        // Multiply the weight value by the quantity of the line item.
        $weight['weight'] *= $line_item->quantity;
      }
    }
  }

  // Allow other modules to alter the weight if necessary.
  drupal_alter('commerce_physical_product_line_item_weight', $weight, $line_item);

  return $weight;
}

/**
 * Determines the weight of an entire order.
 *
 * @param $order
 *   The order object whose weight value should be calculated.
 * @param $unit
 *   The unit of measurement to use for the returned weight of the order.
 *
 * @return
 *   A weight field value array representing the total weight of the order using
 *   the specified unit of measurement or NULL if no weight could be determined.
 */
function commerce_physical_order_weight($order, $unit = 'lb') {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $weight = NULL;

  // Loop over each line item on the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // Get the weight value of product line items.
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $line_item_weight = commerce_physical_product_line_item_weight($line_item_wrapper->value());

      // Add it to the running total converting it to the required weight unit.
      if (!empty($line_item_weight['weight'])) {
        $converted_weight = physical_weight_convert($line_item_weight, $unit);

        if (empty($weight['weight'])) {
          $weight = $converted_weight;
        }
        else {
          $weight['weight'] += $converted_weight['weight'];
        }
      }
    }
  }

  // Allow other modules to alter the weight if necessary.
  drupal_alter('commerce_physical_order_weight', $weight, $order, $unit);

  return $weight;
}

/**
 * Determines whether or not a line item should be considered shippable.
 *
 * @param $line_item
 *   The line item object whose shippability is being determined.
 *
 * @return
 *   Boolean indicating whether or not the given line item represents something
 *   shippable; defaults to FALSE unless the line item represents a product line
 *   item with a discernible weight.
 */
function commerce_physical_line_item_shippable($line_item) {
  $shippable = FALSE;

  // If this is a product line item...
  if (in_array($line_item->type, commerce_product_line_item_types())) {
    // Mark this line item as shippable if we can determine its weight.
    $weight = commerce_physical_product_line_item_weight($line_item);

    if (!empty($weight)) {
      $shippable = TRUE;
    }
  }

  // Allow other modules to alter the shippability of the line item.
  drupal_alter('commerce_physical_line_item_shippable', $shippable, $line_item);

  return $shippable;
}

/**
 * Determines whether or not an order should be considered shippable.
 *
 * @param $order
 *   The order object whose shippability should be determined.
 *
 * @return
 *   Boolean indicating whether or not the given order is shippable; defaults to
 *   FALSE unless any line item on the order is determined to be shippable.
 */
function commerce_physical_order_shippable($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $shippable = FALSE;

  // Loop over all the line items on the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // Mark the order as shippable if the current line item is determined to be
    // shippable.
    if (commerce_physical_line_item_shippable($line_item_wrapper->value())) {
      $shippable = TRUE;
    }
  }

  // Allow other modules to alter the shippability of the line item.
  drupal_alter('commerce_physical_order_shippable', $shippable, $order);

  return $shippable;
}

/**
 * Determines the name of the shipping customer profile reference field for the
 * given order.
 */
function commerce_physical_order_shipping_field_name($order) {
  return 'commerce_customer_shipping';
}

/**
 * Determines the name of the phone number field of a customer profile.
 */
function commerce_physical_customer_profile_phone_number($profile) {
  return 'field_phone';
}

/**
 * Determines whether or not a shipping customer profile should be considered as
 * a residential address.
 */
function commerce_physical_customer_profile_residential($profile) {
  return TRUE;
}
