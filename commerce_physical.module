<?php

/**
 * @file
 * Defines fields (e.g. weight and dimensions) to support creating physical
 * product types.
 */


/**
 * Implements hook_field_info().
 */
function commerce_physical_field_info() {
  return array(
    'commerce_physical_weight' => array(
      'label' => t('Physical weight'),
      'description' => t('This field stores the a physical weight amount and unit of measure.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'commerce_physical_weight_textfield',
      'default_formatter' => 'commerce_physical_weight_formatted',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function commerce_physical_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($field['type'] == 'commerce_physical_weight') {
    // Ensure only numeric values are entered in weight fields.
    foreach ($items as $delta => &$item) {
      if (!empty($item['weight']) && !is_numeric($item['weight'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'commerce_physical_weight',
          'message' => t('%name: you must enter a numeric weight value.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function commerce_physical_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['weight'], $error['message']);
}

/**
 * Implements of hook_field_is_empty().
 */
function commerce_physical_field_is_empty($item, $field) {
  if ($field['type'] == 'commerce_physical_weight') {
    return !isset($item['weight']) || $item['weight'] == NULL;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_physical_field_widget_info() {
  return array(
    'commerce_physical_weight_textfield' => array(
      'label' => t('Weight textfield'),
      'field types' => array('commerce_physical_weight'),
      'settings' => array(
        'default_unit' => 'lb',
        'unit_select_list' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function commerce_physical_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = array_merge(field_info_widget_settings($widget['type']), $widget['settings']);

  $form = array();

  // Build the settings for the weight textfield widget.
  if ($widget['type'] == 'commerce_physical_weight_textfield') {
    $form['default_unit'] = array(
      '#type' => 'select',
      '#title' => t('Unit of measurement'),
      '#options' => commerce_physical_weight_unit_options(),
      '#default_value' => $settings['default_unit'],
    );
    $form['unit_select_list'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow the user to select a different unit of measurement on forms.'),
      '#default_value' => $settings['unit_select_list'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_physical_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = array_merge(field_info_widget_settings($widget['type']), $widget['settings']);

  // Return the weight textfield widget.
  if ($instance['widget']['type'] == 'commerce_physical_weight_textfield') {
    // Determine the default weight value.
    if (isset($items[$delta]['weight'])) {
      $weight = round($items[$delta]['weight'], 5);
    }
    elseif (isset($instance['default_value'][0]['weight']) && ($delta == 0 || $field['cardinality'] > 0)) {
      $weight = round($instance['default_value'][0]['weight'], 5);
    }
    else {
      $weight = '';
    }

    // Add a textfield for the actual weight value.
    $element['weight'] = array(
      '#type' => 'textfield',
      '#title' => $element['#title'],
      '#default_value' => $weight,
      '#size' => 15,
      '#maxlength' => 16,
      '#required' => $instance['required'] && ($delta == 0 || $field['cardinality'] > 0),
    );

    // Determine the unit of measurement.
    if (!empty($items[$delta]['unit'])) {
      $unit = $items[$delta]['unit'];
    }
    elseif (!empty($settings['unit_select_list']) && !empty($instance['default_value'][0]['unit'])) {
      $unit = $instance['default_value'][0]['unit'];
    }
    else {
      $unit = $settings['default_unit'];
    }

    // If the user cannot select a different unit of measurement and the current
    // unit is the same as the default...
    if (empty($settings['unit_select_list']) && $unit == $settings['default_unit']) {
      // Display the unit of measurement after the textfield.
      $element['weight']['#field_suffix'] = commerce_physical_weight_unit_abbreviation($unit);

      // Add a hidden value for the default unit of measurement.
      $element['unit'] = array(
        '#type' => 'value',
        '#value' => $unit,
      );
    }
    else {
      // Get an options list of weight units of measurement.
      $options = commerce_physical_weight_unit_options(FALSE);

      // If the user isn't supposed to have access to select a unit of
      // measurement, only allow the default and the current unit.
      if (empty($settings['unit_select_list'])) {
        $options = array_intersect_key($options, drupal_map_assoc(array($unit, $settings['default_unit'])));
      }

      // Display a unit of measurement select list after the textfield.
      $element['#attached']['css'][] = drupal_get_path('module', 'commerce_physical') . '/theme/commerce_physical.css';

      $element['weight']['#prefix'] = '<div class="commerce-physical-weight-textfield">';

      $element['unit'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $unit,
        '#suffix' => '</div>',
      );
    }

    return $element;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_physical_field_formatter_info() {
  return array(
    'commerce_physical_weight_formatted' => array(
      'label' => t('Formatted weight'),
      'field types' => array('commerce_physical_weight'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_physical_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);

  $element = array();

  // Loop through each item in this field.
  foreach ($items as $delta => $item) {
    // Prepare the link title according to the display formatter.
    switch ($display['type']) {
      case 'commerce_physical_weight_formatted':
        // Just use a text link for the title.
        $html = commerce_physical_weight_format($item);
        break;
    }

    // Add the link to the returned element array.
    $element[$delta] = array(
      '#markup' => $html,
    );
  }

  return $element;
}

/**
 * Returns an associative array of weight units of measurement.
 */
function commerce_physical_weight_unit_info() {
  $units = array(
    'lb' => array(
      'name' => t('Pounds'),
      'abbreviation' => t('lb'),
    ),
    'oz' => array(
      'name' => t('Ounces'),
      'abbreviation' => t('oz'),
    ),
    'kg' => array(
      'name' => t('Kilograms'),
      'abbreviation' => t('kg'),
    ),
    'g' => array(
      'name' => t('Grams'),
      'abbreviation' => t('g'),
    ),
  );

  drupal_alter('commerce_physical_weight_unit_info', $units);

  return $units;
}

/**
 * Returns the name of a weight unit of measurement.
 *
 * @param $type
 *   The type of weight unit whose name should be returned; by default this can
 *   be lb, oz, kg, or g.
 *
 * @return
 *   The name of the specified unit of measurement or FALSE if not found.
 */
function commerce_physical_weight_unit_name($type) {
  $units = commerce_physical_weight_unit_info();

  if (!empty($units[$type]['name'])) {
    return $units[$type]['name'];
  }

  return FALSE;
}

/**
 * Returns the translated abbreviation of a weight unit of measurement.
 *
 * @param $unit
 *   The weight unit of measurement whose translated abbreviation should be
 *   returned; by default this can be lb, oz, kg, or g.
 *
 * @return
 *   The translated abbreviation of the specified unit of measurement or FALSE
 *   if not found.
 */
function commerce_physical_weight_unit_abbreviation($unit) {
  $units = commerce_physical_weight_unit_info();

  if (!empty($units[$unit]['abbreviation'])) {
    return $units[$unit]['abbreviation'];
  }

  return FALSE;
}

/**
 * Returns an options array of weight units of measurement.
 *
 * @param $name
 *   Boolean indicating whether or not the value should be the human readable
 *   name of the unit of measurement instead of the abbreviation.
 */
function commerce_physical_weight_unit_options($name = TRUE) {
  $options = array();

  foreach (commerce_physical_weight_unit_info() as $key => $value) {
    $options[$key] = $name ? $value['name'] : $value['abbreviation'];
  }

  return $options;
}

/**
 * Returns the formatted weight string for the given weight value array.
 *
 * @param $value
 *   A weight field value array containing weight and unit keys.
 */
function commerce_physical_weight_format($value) {
  return t('@weight @unit', array('@weight' => round($value['weight'], 5), '@unit' => commerce_physical_weight_unit_abbreviation($value['unit'])));
}
